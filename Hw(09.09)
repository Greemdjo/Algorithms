#include<iostream>
bool isSumEqualTo(long long a, long long b, long long c) {
    if (a > 0 && b > 0 && c < 0) return false;
    else if (a < 0 && b < 0 && c > 0) return false;
    else if (a > 0 && b < 0 || a < 0 && b > 0) return a + b == c;
    return a == c - b;
}
int main() {
    long long a, b, c;
    std::cin >> a >> b >> c;
    std::cout << (isSumEqualTo(a, b, c) ? "True" : "False");
}

#Task2
#include<iostream>
bool isMultiEqualTo(long long a, long long b, long long c, long long d) {
    return a * b == c * d;
}
int main() {
    int a, b, c, d;
    std::cin >> a >> b >> c >> d;
    std::cout << (isMultiEqualTo(a, b, c, d) ? "True" : "False");
}


Task3
#include<iostream>
#include<cstdint>

bool Position_Circle(int64_t x1, int64_t x2, int64_t y1, int64_t y2, int64_t r1, int64_t r2) {
    uint64_t dx = static_cast<uint64_t>(std::abs(x2 - x1));
    uint64_t dy = static_cast<uint64_t>(std::abs(y2 - y1));
    uint64_t sum_r = static_cast<uint64_t>(r1) + static_cast<uint64_t>(r2);

    if (dx > UINT64_MAX / dx || dy > UINT64_MAX / dy || sum_r > UINT64_MAX / sum_r) {
        return false;
    }

    return dx * dx + dy * dy <= sum_r * sum_r;
}
int main() {
    long long x1, x2, y1, y2, r1, r2;
    std::cin >> x1 >> y1 >> r1;
    std::cin >> x2 >> y2 >> r2;
    std::cout << (Position_Circle(x1, x2, y1, y2, r1, r2) ? "true" : "false");
}

Task4
#include<iostream>
#include <algorithm>
long long intersection_area(long long x1, long long  y1, long long  x2, long long  y2,
    long long x3, long long y3, long long x4, long long y4) {
    long long left = std::max(x1, x3);
    long long right = std::min(x2, x4);
    long long bottom = std::max(y1, y3);
    long long top = std::min(y2, y4);
    return ((right - left > 0 && top - bottom > 0) ? (right - left) * (top - bottom) : 0);
}

int main() {
    int x1, y1, x2, y2; // Первый прямоугольник
    int x3, y3, x4, y4; // Второй прямоугольник

    std::cin >> x1 >> y1 >> x2 >> y2;
    std::cin >> x3 >> y3 >> x4 >> y4;
    std::cout << (intersection_area(x1, y1, x2, y2, x3, y3, x4, y4));
}
